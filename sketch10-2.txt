the last adapter always has to be included since otherwise we won't be able to charge our device.
the first one is 0 but that doesn't really count, although it is useful to guide a solution
from here, it is a nature of which subsets of the remaining N-1 adapters form a valid sequence from 0 to the last one.
it may be easier to work in reverse

ok, before we get to memoizing, we know we want to always include the 19, so our primary caller should just start assuming that is included and trying out the 3 branches starting from it and return their sum.
callers should never call the recursive case if their difference thing doesn't work out. i.e. since 19-15 doesn't work, it should call that fork.
whenever we reach a recursive case where the array is empty, we know we found a valid way to reach the empty array, so return 1.

starting with an array
  reverse sort the array
  append a 0
  return the recursion(array, 1 (this is smalltalk))

so, given an array, the index start
  where start is the element against which we are comparing the next 3 elements.
  1. if this is the last index in the array (implicitly 0), return 1.
  2. count := 0
  3. index (start + 1):
    a. if valid, (array[start] - array[start+1]) is
      1. <= 3, count += call recursive(array, start+1) (The case where we are including everything below in the subset)
      2. > 3, nothing to do.
    b. if invalid, nothing to do (not a valid seq)
  4. index (start + 2):
    a. if valid, (array[start] - array[start+2]) is
      1. <= 3, count += call recursive(array, start+2) (The case where are are NOT including start+1 in the subset).
      2. > 3, nothing to do.
    b. in invalid, nothing to do.
  5. index (start + 3):
    a. if valid, (array[start] - array[start+3]) is
      1. <= 3, count += call recursive(array, start+3) (The case where we are NOT including start+1, start+2 in the subset).
      2. > 3, nothing to do.
    b. in invalid, nothing to do.

hmm we are missing something since for the larger sample this is undercounting.
ok consider the simple example #(1 2 3), which always requires 3 to be included
-> #((6) 3 2 1 0)
there are 4 actual ways to reach 6 are:
3
3 2 1
3 2
3 1
but our algorithm returns just 2 ways as it is right now. TODO: walk through it to see what is missing.

recursive(array, 1)
 count = 0
 count += recursive(array, 2)
  count = 0
  count += recursive(array, 3)
   count = 0
   count += recursive(array, 4)
    return 1
   return 1
  count += recursive(array, 4)
   return 1
  return 2
 count += recursive(array, 3)
  count = 0
  count += recursive(array, 4)
   return 1
  return 1
 count += recursive(array, 4)
  return 1
 return 4

hmm is there an implementation bug? Yes. we were just forgetting to use the reversed and zero appended array!

ok, now this is clearly very slow without some kind of memoization.
adding the count to a shared dict after finding it for a given start index is all we need. Solved!

----

        1  2  3  4  5  6 7 8 9  10  11  12
#((22) 19 16 15 12 11 10 7 6 5   4   1   0)


we try with 19 and take that branch #(19) -> 8
  we try with 16 and take that branch #(19 16) -> 8
    we try with 15 and take that branch #(19 16 15) -> 8
      we try with 12 and take that branch #(19 16 15 12) -> 8
        we try with 11 and take that branch #(19 16 15 12 11) -> 4
	      we try with 10 and take that branch #(19 16 15 12 11 10) -> 4
	        we try with 7 and take that branch #(19 16 15 12 11 10 7) -> 4
	          we try with 6 and take that branch #(19 16 15 12 11 10 7 6) -> 2
	            we try with 5 and take that branch #(19 16 15 12 11 10 7 6 5) -> 1
	              we try with 4 and take that branch #(19 16 15 12 11 10 7 6 5 4) -> 1
	                we try with 1 and take that branch #(19 16 15 12 11 10 7 6 5 4 1) -> 1
	                  we try with 0 and that is our base case, return 1
	                we try with 0 and fail.
	              we try with 1 and fail.
                  we try with 0 and fail.
	            we try with 4 and take that branch #(19 16 15 12 11 10 7 6 4) -> 1
	              we try with 1 and take that branch #(19 16 15 12 11 10 7 6 4 1) -> 1
	                we try with 0 and that is our base case, return 1
	            we try with 1 and fail.
	          we try with 5 and take that branch #(19 16 15 12 11 10 7 5) -> 1
	            we try with 4 and take that branch #(19 16 15 12 11 10 7 5 4) -> 1
	              we try with 1 and take that branch #(19 16 15 12 11 10 7 5 4 1) -> 1
	                we try with 0 and that is our base case, return 1
	            we try with 1 and fail.
	          we try with 4 and take that branch #(19 16 15 12 11 10 7 4) -> 1
	            we try with 1 and take that branch #(19 16 15 12 11 10 7 4 1) -> 1
	              we try with 0 and that is our base case, return 1
	            we try with 0 and fail.
	        we try with 6 and fail.
            we try with 5 and fail.
	      we try with 7 and fail.
          we try with 6 and fail.
        we try with 10 and take that branch #(19 16 15 12 10) -> 4
          we try with 7 and take that branch #(19 16 15 12 10 7) -> 4
            we try with 6 and take that branch #(19 16 15 12 10 7 6) -> 2
              we try with 5 and take that branch #(19 16 15 12 10 7 6 5) -> 1
                we try with 4 and take that branch #(19 16 15 12 10 7 6 5 4) -> 1
                  we try with 1 and take that branch #(19 16 15 12 10 7 6 5 4 1) -> 1
                    we try with 0 and that is our base case, return 1
                  we try with 0 and fail.
                we try with 1 and fail.
              we try with 4 and take that branch #(19 16 15 12 10 7 6 4) -> 1
                we try with 1 and take that branch #(19 16 15 12 10 7 6 4 1) -> 1
                  we try with 0 and that is our base case, return 1
                we try with 0 and fail.
              we try with 1 and fail.
            we try with 5 and take that branch #(19 16 15 12 10 7 5) -> 1
              we try with 4 and take that branch #(19 16 15 12 10 7 5 4) -> 1
                we try with 1 and take that branch #(19 16 15 12 10 7 5 4 1) -> 1
                  we try with 0 and that is our base case, return 1
                we try with 0 and fail.
              we try with 1 and fail.
              we try with 0 and fail.
            we try with 4 and take that branch #(19 16 15 12 10 7 4) -> 1
              we try with 1 and take that branch #(19 16 15 12 10 7 4 1) -> 1
                we try with 0 and that is our base case, return 1
              we try with 0 and fail.
          we try with 6 and fail.
          we try with 5 and fail.
        we try with 7 and fail.
      we try with 11 and fail.
    we try with 12 and fail.
    we try with 11 and fail.
  we try with 15 and fail.
  we try with 12 and fail.
we try with 16 and fail.
we try with 15 and fail.
